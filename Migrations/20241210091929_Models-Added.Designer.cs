// <auto-generated />
using System;
using FormMaker.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormMaker.Migrations
{
    [DbContext(typeof(FormMakerDbContext))]
    [Migration("20241210091929_Models-Added")]
    partial class ModelsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormMaker.Model.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<int?>("AnswerOptionID")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CaptchaAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FormQuestionProcessID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCaptchaSolved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AnswerID");

                    b.HasIndex("AnswerOptionID");

                    b.HasIndex("FormQuestionProcessID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FormMaker.Model.AnswerOption", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("FormMaker.Model.Form", b =>
                {
                    b.Property<int>("FormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrequent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FormID");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("FormMaker.Model.FormProcess", b =>
                {
                    b.Property<int>("FormProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormProcessID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FormProcessID");

                    b.HasIndex("FormID");

                    b.HasIndex("ProcessID");

                    b.ToTable("FormProcesses");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestion", b =>
                {
                    b.Property<int>("FormQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormQuestionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FormQuestionID");

                    b.HasIndex("FormID");

                    b.HasIndex("QuestionID");

                    b.ToTable("FormQuestions");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestionProcess", b =>
                {
                    b.Property<int>("FormQuestionProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormQuestionProcessID"));

                    b.Property<int>("FormProcessID")
                        .HasColumnType("int");

                    b.Property<int>("FormQuestionID")
                        .HasColumnType("int");

                    b.HasKey("FormQuestionProcessID");

                    b.HasIndex("FormProcessID");

                    b.HasIndex("FormQuestionID");

                    b.ToTable("FormQuestionProcesses");
                });

            modelBuilder.Entity("FormMaker.Model.Process", b =>
                {
                    b.Property<int>("ProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProcessTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProcessID");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("FormMaker.Model.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrequent")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidationRule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuestionTitle");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FormMaker.Model.Answer", b =>
                {
                    b.HasOne("FormMaker.Model.AnswerOption", "AnswerOption")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerOptionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormMaker.Model.FormQuestionProcess", "FormQuestionProcess")
                        .WithMany("Answers")
                        .HasForeignKey("FormQuestionProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("FormQuestionProcess");
                });

            modelBuilder.Entity("FormMaker.Model.AnswerOption", b =>
                {
                    b.HasOne("FormMaker.Model.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormMaker.Model.FormProcess", b =>
                {
                    b.HasOne("FormMaker.Model.Form", "Form")
                        .WithMany("FormProcesses")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormMaker.Model.Process", "Process")
                        .WithMany("FormProcesses")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestion", b =>
                {
                    b.HasOne("FormMaker.Model.Form", "Form")
                        .WithMany("FormQuestions")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormMaker.Model.Question", "Question")
                        .WithMany("FormQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestionProcess", b =>
                {
                    b.HasOne("FormMaker.Model.FormProcess", "FormProcess")
                        .WithMany("FormQuestionProcesses")
                        .HasForeignKey("FormProcessID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FormMaker.Model.FormQuestion", "FormQuestion")
                        .WithMany("FormQuestionProcesses")
                        .HasForeignKey("FormQuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FormProcess");

                    b.Navigation("FormQuestion");
                });

            modelBuilder.Entity("FormMaker.Model.AnswerOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormMaker.Model.Form", b =>
                {
                    b.Navigation("FormProcesses");

                    b.Navigation("FormQuestions");
                });

            modelBuilder.Entity("FormMaker.Model.FormProcess", b =>
                {
                    b.Navigation("FormQuestionProcesses");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestion", b =>
                {
                    b.Navigation("FormQuestionProcesses");
                });

            modelBuilder.Entity("FormMaker.Model.FormQuestionProcess", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormMaker.Model.Process", b =>
                {
                    b.Navigation("FormProcesses");
                });

            modelBuilder.Entity("FormMaker.Model.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("FormQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
